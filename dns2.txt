
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<netinet/in.h>
#include<unistd.h>

char dns_ser[10][100];
int dns_ser_count =0;

#define T_A 1
#define T_NS 2
#define T_CNAME 5
#define T_SOA 6
#define T_PTR 12
#define T_MX 15

void gethostbyname (unsigned char* ,int);
void ChangetoDns (unsigned char*, unsigned char*);
unsigned char* ReadName (unsigned char*, unsigned char*, int*);
void get_dns_ser();

struct DNS_HEADER
{
unsigned short id;
unsigned char rd :1;
unsigned char tc :1;
unsigned char aa:1;
unsigned char opcode:4;
unsigned char qr :1;
unsigned char rcode :4;
unsigned cd:1;
unsigned ad:1;
unsigned z:1;
unsigned ra:1;
unsigned short q_count;
unsigned short ans_count;
unsigned short auth_cont;
unsigned add_count;
};

struct QUESTION
{
unsigned short qtype;
unsigned short qclass;
};

#pragma pack(push,1)
struct R_DATA
{
unsigned short type;
unsigned short _class;
unsigned int ttl;
unsigned short data_len;
};

#pragma pack(pop)
struct RES_RECORD
{
unsigned char *name;
struct R_DATA *resource;
unsigned char *rdata;
};

typedef struct
{
unsigned char *name;
struct QUESTION *ques;
}QUERY;

int main (int argc, char *argv[])
{
	unsigned char hostname[100];
get_dns_ser();

printf("Enter hostname to lookup :");
scanf ("%s",hostname);

gethostbyname(hostname, T_A);
return 0;
}

void gethostbyname(unsigned char *host, int query_type)
{
unsigned char buf[65536],*qname,*reader;
int i, j, stop, s;

struct sockaddr_in a;

struct RES_RECORD answer[20], auth[20], addit[20];
struct sockaddr_in dest;

struct DNS_HEADER *dns =NULL;
struct QUESTION *qinfo =NULL;

printf("Resolving %s" , host);

s=socket(AF_INET ,SOCK_DGRAM, IPPROTO_UDP);

dest.sin_family =AF_INET;
dest.sin_port =htons(53);
dest.sin_addr.s_addr = inet_addr(dns_ser[0]);

dns= (struct DNS_HEADER *)&buf;

dns->id=(unsigned short) htons(getpid());
dns->qr =0;
dns->opcode=0;
dns->aa=0;
dns->tc=0;
dns->rd=1;
dns->ra=0;
dns->z=0;
dns->ad=0;
dns->cd=0;
dns->rcode=0;
dns->q_count =htons(1);
dns->ans_count=0;
dns->auth_cont=0;
dns->add_count=0;

qname =(unsigned char*)&buf[sizeof(struct DNS_HEADER)];

ChangetoDns(qname,host);
qinfo=(struct QUESTION*)&buf[sizeof(struct DNS_HEADER) + (strlen((const char*)qname) + 1)];
qinfo->qtype = htons( query_type ); 
	qinfo->qclass = htons(1); 

	printf("\nSending Packet...");
	if( sendto(s,(char*)buf,sizeof(struct DNS_HEADER) + (strlen((const char*)qname)+1) + sizeof(struct QUESTION),0,(struct sockaddr*)&dest,sizeof(dest)) < 0)
	{
		perror("sendto failed");
	}
	printf("Done");
	
	
	i = sizeof dest;
	printf("\nReceiving answer...");
	if(recvfrom (s,(char*)buf , 65536 , 0 , (struct sockaddr*)&dest , (socklen_t*)&i ) < 0)
	{
		perror("recvfrom failed");
	}
	printf("Done");

	dns = (struct DNS_HEADER*) buf;

	
	reader = &buf[sizeof(struct DNS_HEADER) + (strlen((const char*)qname)+1) + sizeof(struct QUESTION)];

	printf("\nThe response contains : ");
	printf("\n %d Questions.",ntohs(dns->q_count));
	printf("\n %d Answer.",ntohs(dns->ans_count));
	printf("\n %d Authoritative Servers.",ntohs(dns->auth_cont));
	printf("\n %d Additional records.\n\n",ntohs(dns->add_count));


	stop=0;

	for(i=0;i<ntohs(dns->ans_count);i++)
	{
		answer[i].name=ReadName(reader,buf,&stop);
		reader = reader + stop;

		answer[i].resource = (struct R_DATA*)(reader);
		reader = reader + sizeof(struct R_DATA);

		if(ntohs(answer[i].resource->type) == 1) 
		{
			answer[i].rdata = (unsigned char*)malloc(ntohs(answer[i].resource->data_len));

			for(j=0 ; j<ntohs(answer[i].resource->data_len) ; j++)
			{
				answer[i].rdata[j]=reader[j];
			}

			answer[i].rdata[ntohs(answer[i].resource->data_len)] = '\0';

			reader = reader + ntohs(answer[i].resource->data_len);
		}
		else
		{
			answer[i].rdata = ReadName(reader,buf,&stop);
			reader = reader + stop;
		}
	}


	for(i=0;i<ntohs(dns->auth_cont);i++)
	{
		auth[i].name=ReadName(reader,buf,&stop);
		reader+=stop;

		auth[i].resource=(struct R_DATA*)(reader);
		reader+=sizeof(struct R_DATA);

		auth[i].rdata=ReadName(reader,buf,&stop);
		reader+=stop;
	}

	
	for(i=0;i<ntohs(dns->add_count);i++)
	{
		addit[i].name=ReadName(reader,buf,&stop);
		reader+=stop;

		addit[i].resource=(struct R_DATA*)(reader);
		reader+=sizeof(struct R_DATA);

		if(ntohs(addit[i].resource->type)==1)
		{
			addit[i].rdata = (unsigned char*)malloc(ntohs(addit[i].resource->data_len));
			for(j=0;j<ntohs(addit[i].resource->data_len);j++)
			addit[i].rdata[j]=reader[j];

			addit[i].rdata[ntohs(addit[i].resource->data_len)]='\0';
			reader+=ntohs(addit[i].resource->data_len);
		}
		else
		{
			addit[i].rdata=ReadName(reader,buf,&stop);
			reader+=stop;
		}
	}

	
	printf("\nAnswer Records : %d \n" , ntohs(dns->ans_count) );
	for(i=0 ; i < ntohs(dns->ans_count) ; i++)
	{
		printf("Name : %s ",answer[i].name);

		if( ntohs(answer[i].resource->type) == T_A) 
		{
			long *p;
			p=(long*)answer[i].rdata;
			a.sin_addr.s_addr=(*p); 
			printf("has IPv4 address : %s",inet_ntoa(a.sin_addr));
		}
		
		if(ntohs(answer[i].resource->type)==5) 
		{
			
			printf("has alias name : %s",answer[i].rdata);
		}

		printf("\n");
	}

	
	printf("\nAuthoritive Records : %d \n" , ntohs(dns->auth_cont) );
	for( i=0 ; i < ntohs(dns->auth_cont) ; i++)
	{
		
		printf("Name : %s ",auth[i].name);
		if(ntohs(auth[i].resource->type)==2)
		{
			printf("has nameserver : %s",auth[i].rdata);
		}
		printf("\n");
	}

	
	printf("\nAdditional Records : %d \n" , ntohs(dns->add_count) );
	for(i=0; i < ntohs(dns->add_count) ; i++)
	{
		printf("Name : %s ",addit[i].name);
		if(ntohs(addit[i].resource->type)==1)
		{
			long *p;
			p=(long*)addit[i].rdata;
			a.sin_addr.s_addr=(*p);
			printf("has IPv4 address : %s",inet_ntoa(a.sin_addr));
		}
		printf("\n");
	}
	return;
}


u_char* ReadName(unsigned char* reader,unsigned char* buffer,int* count)
{
	unsigned char *name;
	unsigned int p=0,jumped=0,offset;
	int i , j;

	*count = 1;
	name = (unsigned char*)malloc(256);

	name[0]='\0';

	
	while(*reader!=0)
	{
		if(*reader>=192)
		{
			offset = (*reader)*256 + *(reader+1) - 49152; 
			reader = buffer + offset - 1;
			jumped = 1; 
		}
		else
		{
			name[p++]=*reader;
		}

		reader = reader+1;

		if(jumped==0)
		{
			*count = *count + 1; 
		}
	}

	name[p]='\0'; 
	if(jumped==1)
	{
		*count = *count + 1; 
	}

	
	for(i=0;i<(int)strlen((const char*)name);i++) 
	{
		p=name[i];
		for(j=0;j<(int)p;j++) 
		{
			name[i]=name[i+1];
			i=i+1;
		}
		name[i]='.';
	}
	name[i-1]='\0'; 
	return name;
}


void get_dns_ser()
{
	FILE *fp;
	char line[200] , *p;
	if((fp = fopen("/etc/resolv.conf" , "r")) == NULL)
	{
		printf("Failed opening /etc/resolv.conf file \n");
	}
	
	while(fgets(line , 200 , fp))
	{
		if(line[0] == '#')
		{
			continue;
		}
		if(strncmp(line , "nameserver" , 10) == 0)
		{
			p = strtok(line , " ");
			p = strtok(NULL , " ");
			
			
		}
	}
	
	strcpy(dns_ser[0] , "208.67.222.222");
	strcpy(dns_ser[1] , "208.67.220.220");
}


void ChangetoDns(unsigned char* dns,unsigned char* host) 
{
	int lock = 0 , i;
	strcat((char*)host,".");
	
	for(i = 0 ; i < strlen((char*)host) ; i++) 
	{
		if(host[i]=='.') 
		{
			*dns++ = i-lock;
			for(;lock<i;lock++) 
			{
				*dns++=host[lock];
			}
			lock++; 
	}
	*dns++='\0';
	}
}

